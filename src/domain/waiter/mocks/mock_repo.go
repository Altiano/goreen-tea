// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	waiterModels "gitlab.com/altiano/goreen-tea/src/domain/waiter/models"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetByFreetime mocks base method.
func (m *MockRepo) GetByFreetime(ctx context.Context) ([]waiterModels.Waiter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFreetime", ctx)
	ret0, _ := ret[0].([]waiterModels.Waiter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFreetime indicates an expected call of GetByFreetime.
func (mr *MockRepoMockRecorder) GetByFreetime(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFreetime", reflect.TypeOf((*MockRepo)(nil).GetByFreetime), ctx)
}

// IncreaseTotalServe mocks base method.
func (m *MockRepo) IncreaseTotalServe(ctx context.Context, waiter waiterModels.Waiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseTotalServe", ctx, waiter)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseTotalServe indicates an expected call of IncreaseTotalServe.
func (mr *MockRepoMockRecorder) IncreaseTotalServe(ctx, waiter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseTotalServe", reflect.TypeOf((*MockRepo)(nil).IncreaseTotalServe), ctx, waiter)
}
