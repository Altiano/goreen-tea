// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	coModels "gitlab.com/altiano/golang-boilerplate/src/domain/customerOrder/models"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetLastCode mocks base method.
func (m *MockRepo) GetLastCode(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCode", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCode indicates an expected call of GetLastCode.
func (mr *MockRepoMockRecorder) GetLastCode(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCode", reflect.TypeOf((*MockRepo)(nil).GetLastCode), ctx)
}

// GetReferralCodeCreator mocks base method.
func (m *MockRepo) GetReferralCodeCreator(ctx context.Context, refererCode int) (coModels.CustomerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralCodeCreator", ctx, refererCode)
	ret0, _ := ret[0].(coModels.CustomerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferralCodeCreator indicates an expected call of GetReferralCodeCreator.
func (mr *MockRepoMockRecorder) GetReferralCodeCreator(ctx, refererCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralCodeCreator", reflect.TypeOf((*MockRepo)(nil).GetReferralCodeCreator), ctx, refererCode)
}

// GetReferralCodeRedeemer mocks base method.
func (m *MockRepo) GetReferralCodeRedeemer(ctx context.Context, refererCode int) (coModels.CustomerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralCodeRedeemer", ctx, refererCode)
	ret0, _ := ret[0].(coModels.CustomerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferralCodeRedeemer indicates an expected call of GetReferralCodeRedeemer.
func (mr *MockRepoMockRecorder) GetReferralCodeRedeemer(ctx, refererCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralCodeRedeemer", reflect.TypeOf((*MockRepo)(nil).GetReferralCodeRedeemer), ctx, refererCode)
}

// Save mocks base method.
func (m *MockRepo) Save(ctx context.Context, co coModels.CustomerOrder) (coModels.CustomerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, co)
	ret0, _ := ret[0].(coModels.CustomerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRepoMockRecorder) Save(ctx, co interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepo)(nil).Save), ctx, co)
}

// UpdateWaiter mocks base method.
func (m *MockRepo) UpdateWaiter(ctx context.Context, co coModels.CustomerOrder, waiterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWaiter", ctx, co, waiterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWaiter indicates an expected call of UpdateWaiter.
func (mr *MockRepoMockRecorder) UpdateWaiter(ctx, co, waiterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWaiter", reflect.TypeOf((*MockRepo)(nil).UpdateWaiter), ctx, co, waiterName)
}
